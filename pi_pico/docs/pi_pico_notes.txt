PI PICO Notes

=== DOWNLOAD FILES   ===============================

See ~/sw_install_files/pi_pico_family/README_AAA.txt

The downloads are saved in ~/sw_install_files/pi_pico_family/
They are not currently checked into any git repository.

There are some symlinks to specific items, saved in GIT:
  See ~/git/microcontrollers/pi_pico/UF2_files/pi_pico_family


=== GIT repo  ====================================

Linux, RPi-5
  cd ~/git
  git clone git@github.com:anr-private/microcontrollers.git

UF2 download files - see README_AAA.txt and sym-links here:
   ~/git/microcontrollers/pi_pico/UF2_files/pi_pico_family
 Actual files are here:
   ~/sw_install_files/pi_pico_family/


===  UBUNTU  Install/Setup   ==============================

Created a udev file that contains:
    SUBSYSTEM=="usb", ATTRS{idVendor}=="2e8a", ATTRS{idProduct}=="0003", SYMLINK+="picopico", NAME="picopico"
It installs in /etc/udev/rules.d/  (as root).
Tried it with IDs from one of the 4 Pico W. It does not seem to matter.
So removed it.  See file ./99-pi-pico.rules_NOT_USED.

See:
  /home/art/git/microcontrollers/docs/thonny_install/thonny_install_ubuntu_24.04.txt

That doc shows how to do these:
  Thonny running on System76 Ubuntu 24.04
  Plug in the Pico; ubunty finds the PI PICO at /dev/ttyACM0
  Install MicroPython on the Pico (using Thonny, lower right margin
    mouse-click, choose  Raspberry Pi Pico /dev/ttyACM0

PICO FIRMWARE and MICROPYTHON

The Raspberry Pi org tutorial shows how to install MicroPython 
in tutorial step 3. See TUTORIAL (below).

On the Pi Pico W boards I bought DVOZVO brand - had to reload the UF2 file
a couple times. Also the internal LEDs on GPIO 25 do not work.
Latest firmware is v1.25.0  2025-04-15
   import sys
    print(sys.version)
    # OUTPUT:  3.4.0; MicroPython v1.25.0 on 2025-04-15
Install firmware using uf2 file; download from MicroPython page.
  ~/sw_install_files/pi_pico/pi_pico_w/RPI...uf2
Requires this process:
   unplug pico
   hold BOOTSEL on pico board, then plug Pico into USB 
      Should mount the pico as a mass storage device
   copy the uf2 file to the device using file-mgr gui
   pico should reboot and be ready to use in Thonny
   unplug / replug pico # optional(?)
 Using Thonny makes this easier. 
In Thonny, config the interpreter:
  Tools -> Options -> Interpreter (tab)
     Which kind of interpreter:
        MicroPython (Raspberry Pi Pico)
     Port:
        Board in FS mode - Board CDC (/dev/ttyACM0)
     Click link (lower right) 'Install or update MicroPython'


DETECTING WLAN 

There is no direct method for software written in MicroPython to discover 
whether it is running on a Raspberry Pi Pico or a Pico W by looking at the 
hardware. However, you can tell indirectly by looking to see if network 
functionality is included in your particular MicroPython firmware:
   import network
   if hasattr(network, "WLAN"):
      # the board has WLAN capabilities

Alternatively, you can inspect the MicroPython firmware version to check 
whether it was compiled for Raspberry Pi Pico or for Pico W using the 
sys module.
   import sys
   print(sys.implementation)
   # Expected output:
   (name='micropython', version=(1, 19, 1), 
    _machine='Raspberry Pi Pico W with RP2040', _mpy=4102)
If the 'Pico W' string is present and in sys.implementation._machine, 
your firmware was compiled for Pico W.


INSTALLING A PYTHON PROGRAM on Pico

Copy the program from host computer to the Pico, 
It must be called 'main.py'.
It will be run if you connect the Pico to a USB power source
(unplugged from host computer).


CURRENT, VOLTAGE, POWER LIMITS

LED's datasheet Vf: 2V.
Trial shows that 2mA produces enough brightness
Use a series resistor to limit current.
One end of the resistor is connects to 3.3V supply.
 3.3 - Vf = 1.3V  across the resister
Change the resistor value to change the current that will flow.
Resistor: V = I * R. V=1.3, chosen current is 0.002 (2mA).
  R = 1.3 / 0.002 = 650 ohms   (680 or 560 are standard values)
Choosing R = 560 ohms:
  V = I * R   so I = V / R
  1.3v / 560 ohms  =  0.0023  (2.3 mA)
Resistor wattage:
  P = I**2  *  R
      (0.0023 * 0.0023) * 560   = 0,003 W  (3 mW)
A 1/4 W resistor is 0.25, so plenty of headroom on wattage.
Even 0603 resistor is 0.1 W, so still plenty.


LCD DISPLAYS

hd44780 
Hitachi HD44780 LCD controller is raw display controller (does not do I2C).
Protocol and operation details here:
  https://en.wikipedia.org/wiki/Hitachi_HD44780_LCD_controller

Generally they need 5v. The waveshare seems to work with the 3.3V from
pin 36 of Pi Pico.

This is a driver for the LCD1604 (etc) that use PCF8754 I2C driver:
  https://github.com/liyuanhe211/Micropython_LCD1602_LCD2004_I2C_Lib
See
  ~/git/microcontrollers/pi_pico/examples/lcd1602_drivers/
     lcd1602_lcd2004_i2c_lib/Micropython_LCD1602_LCD2004_I2C_Lib

QAPASS LCD1602 Display
  uses PCF8754 I2C chip
  not compatible with Waveshare driver

Waveshare LCD1602 Display
  uses AiP31068L LCD driver: display
       SN3193 backlight driver RGB backlight
       PCA9633 RGB  I2C and RGB backlight
  


====================================================================

TUTORIAL w/ picozero  - Raspberry Pi org.

  https://projects.raspberrypi.org/en/projects/getting-started-with-the-pico

Clone the picozero pkg from github. 
See
   /home/art/git/microcontrollers/pi_pico/pkgs/picozero_github_repo/GRAB_PICOZERO.sh
See file (my copy of the original):
   ~/git/microcontrollers/pi_pico/pkgs/picozero_github_repo/picozero.py
The original file is here:
   ~/git/microcontrollers/pi_pico/pkgs/picozero_github_repo/
            picozero/picozero/picozero.py
The entire picozero repo is not checked into my git/microcontrollers/ repo:
it is kinda big  5Mb, and it is a repo in its own right so we'd have a
repo-in-a-repo, not a good thing.

Upload my copy of picozero.py to the Pico in dir '/':
 - In Thonny, View -> Files  should be CHECKED to enable file browser at left.
 - Under the 'This computer', navigate to picozero.py (path show above).
 - Right-click on it; choose 'upload to /'
The file should now appear in the Raspberry Pi Pico section of the FILES browser.

Test picozero.py is installed:
 - In the MicroPython shell (bottom half of Thonny):
     from picozero import pico_led    # takes a couple seconds
     pico_led.on()   # turns LED on the Pico board on
     pico_led.off()  # turns LED on the Pico board off

Test using this file:
   ~/git/microcontrollers/pi_pico/tutorial_from_rpi_foundation/
       basic_examples/simple_led_test_using_picozero.py

PICOZERO exception:
  Gets this exception if you push the button too quickly:
    EventFailedScheduleQueueFull   picozero.py line 1641 in _pin_change
      <...my-handler-function...> not run due to the micropython
        schedule being full
  This happens in the picozero.Button class if you assign a handler:
     btn = Button(...some GPIO pin number ...)
     btn.when_pressed = btn_pressed_handler  # assign handler function


=== THREADING   ===========================================

  git/microcontrollers/pi_pico/examples/threading_multi_core/*.py

   https://bytesnbits.co.uk/multi-thread-coding-on-the-raspberry-pi-pico-in-micropython/
   https://bytesnbits.co.uk/pi-pico-spi-lcd-frame-buffer/#google_vignette

*NOTE* CRASH due to memory / GC
    import gc  # import garbage collector library at top of code
     ...
    # run the GC in the threads; prevent crash due to memory/heap leakage
    # in the _thread code.   
    gc.collect()  # run garbage collection

THREAD NUMBER
   _thread.get_ident() # gets thread number as int: 1,2, etc

ENDING A THREAD
	A thread's function can just return, thereby ending the thread.
    So an alternative to locking is to just kick the second thread off
    and have it return ('quit') when it's done. Then start it again
    when you need it.

LOCK
   import _thread
   ...
   def main_thread(...args...):
      """ runs in first core """
      ...code...
   def other_thread(arg1, arg2, kw1):
      """ runs in second core """
      ...code...
   ...
   # start the other thread; provide args to it
   second_thread = _thread.start_new_thread(other_thread, (123,345), {kw1="val"})
   # run the main thread
   core0_thread()

   # WITH LOCK OBJ
	def core0_thread():
		global lock
		while True:
			# try to acquire lock - wait if in use
			lock.acquire()
			... work ...
			lock.release()
			# let the other guy go - is this needed?
			time.sleep(0.1)
		...
	def core1_thread():
		global lock
		while True:
			# try to acquire lock - wait if in use
			lock.acquire()
			... work ...
			lock.release()
			# let the other guy go - is this needed?
			time.sleep(0.1)
	lock = _thread.allocate_lock()
	second_thread = _thread.start_new_thread(core1_thread, ())
	core0_thread()
To check the lock:
	lock.locked()   # returns True if locked




===  ASYNCIO   =============================================
   

Grabbed it from github:   2025-06-26
   ~/git/microcontrollers/pi_pico/pkgs/uasyncio_v3/micropython-async/v3
Pkg name is uasyncio on older MicroPython firmware; new name is just asyncio.
Tutorial is in v3/docs:
   (Install okular using apt)
   cd .../v3/docs
   okular TUTORIAL.md &


===  MAKING THINGS WITH CHRIS DEHUT  Youtube   ========================

  git/microcontrollers/pi_pico/making_stuff.../

PICO_Interrupts/
interrupt_demo_ANR.py
  - machine.Pin  - LED, button on GPIO pins
  - uses button.irq = handler  to handle button presses
     - IRQ_RISING | IRQ_FALLING modes
  - debounces using a global variable
  - main thread does 'work' while IRQ runs
  - prints thread ID using import _thread; _thread.get_ident()

PICO_LEDs/
  Simple LED control
  PWM control of LED brightness  led.duty_u16(floating-value 0.0 to 100.0)
PICO-Timers
  All timers are software timers; in Pi Pico there is only 1 hardware timer;
  all timers use this one timer, whose period is 1ms.
 Timer-Many.py
  Run several timers using callback handlers; they run independently of 
  main loop. 
    import machine
    blue_led = machine.Pin(12,machine.Pin.OUT)
    def blue_handler(source_obj):
    	blue_led.toggle()
    blue_timer = Timer(period=2000, mode=Timer.PERIODIC, callback=blue_handler)
    # run main until done
    # Do cleanup:
    blue_timer.deinit()
    utime.sleep(1)
    blue_led.value(0)
 Timer-Many.py
   Uses try/except to catch KeyboardInterrupt and do the cleanup.
 Timer-Pump.py
    Uses a one-shot combined with a periodic
     Blue_Timer = Timer(period=2000, mode=Timer.PERIODIC, callback=Blue_Blinker)
     Pump_Timer = Timer(period=9000, mode=Timer.ONE_SHOT, callback=Pump_Off)

PWM Control LED Brightness
  0030_PICO_PWM
   PWM_B0.py - simple program that manually sets PWD to one duty cycle value
   PWM-B1.py - 
 Code:
   PWM_led = machine.PWM(machine.Pin(2))  #use physical pin 4/GP2 for LED output
   PWM_led.freq(1000)
    # change duty cycle as desired
    PWM_led.duty_u16(Duty_Cycle) # 0 - 65535
    # CLEANUP on program exit
    PWM_Sig.duty_u16(10)
    utime.sleep(0.001) # not sure why, but this allows LED to go dark
    PWM_Sig.deinit()
Set the frequency as appropriate to the device. Too low causes flicker or
causes a motor to be jumpy (hard on the motor and driver). Too high and
whatever is being controlled may not be able to keep up, so poor action or
reliability. Probably Pico cannot go much more than 500KHz.
Duty cycle may not correspond exactly to brightness or motor speed - depends
on circuit and devices.

PLOTTER for plotting data
  Use view ->plotter  to show plotter window
  Print the values to be plotted.
  pi_pico/examples/plotter_demo.py






=== INTERRUPT SERVICE ROUTINES   ===========================

 https://docs.micropython.org/en/latest/reference/isr_rules.html#isr-rules

See also: 
  import pyb 
  saved_state = pyb.disable_irq();
     # critical section here
  pyb.enable_irq(saved_state)
For Pi Pico:
  # Disable interrupts and store the current IRQ state
  old_irq_state = machine.disable_irq()
    # Your critical section of code goes here
    # (e.g., accessing shared data or performing time-sensitive operations)
    # Re-enable interrupts using the saved state
  machine.enable_irq(old_irq_state)
NOTE that disable_irq can disable the hardware timer and so mess up the
timing of utime.sleep() and other stuff that uses the timer(!)

An interrupt service routine cannot allocate memory - so not allowed:
floating point operations, list.append, dict insert, object creation, etc.
Use a bytearray or array.array as shared space.
Consider disable/re-enable IRQ to protect critical section in main code.

Exception in a ISR cannot allocate an exception obj.
To provide space for doing so:
  import micropython
  micropython.alloc_emergency_exception_buf(100)

# Example: 
 import pyb, micropython
 micropython.alloc_emergency_exception_buf(100)
 class Foo(object):
    def __init__(self, timer, led):
        self.led = led
        timer.callback(self.cb)
    def cb(self, tim):
    	""" allows sharing the led attribute """
        self.led.toggle()
 red   = Foo(pyb.Timer(4, freq=1), pyb.LED(1))
 green = Foo(pyb.Timer(2, freq=0.8), pyb.LED(2))

A means of creating an object without employing a class or globals is as follows:
The compiler instantiates the default buf argument when the function is loaded 
for the first time (usually when the module it’s in is imported).
 def set_volume(t, buf=bytearray(3)):
    buf[0] = 0xa5
    buf[1] = t >> 4
    buf[2] = 0x5a
    return buf

An instance of object creation occurs when a reference to a bound method is 
created. This means that an ISR cannot pass a bound method to a function. 
One solution is to create a reference to the bound method in the 
class constructor and to pass that reference in the ISR. For example:
 class Foo():
    def __init__(self):
        self.bar_ref = self.bar  # Allocation occurs here
        self.x = 0.1
        tim = pyb.Timer(4)
        tim.init(freq=2)
        tim.callback(self.cb)
         #
    def bar(self, _):
        self.x *= 1.2
        print(self.x)
         #
    def cb(self, t):
        # Passing self.bar would cause allocation.
        micropython.schedule(self.bar_ref, 0)
         #
Other techniques: define and instantiate the method in the constructor or
to pass Foo.bar() with the argument self.

Altering the contents of an array or bytearray is safe. This is because 
bytes or words are written as a single machine code instruction which is 
not interruptible: in the parlance of real time programming the write is 
atomic. Also true for updating a dictionary item because items 
are machine words, being integers or pointers to objects. 
A user-defined object might instantiate an array or bytearray. 
It is valid for both the main loop and the ISR to alter the 
contents of these.

===  micropython.schedule and ISR  ==================================


Using micropython.schedule with an ISR.

This function enables an ISR to schedule a callback for execution
“very soon”. The callback is queued for execution which will take place
at a time when the heap is not locked. Hence it can create Python objects
and use floats. The callback is also guaranteed to run at a time when the
main program has completed any update of Python objects, so the callback
will not encounter partially updated objects.

Typical usage is to handle sensor hardware. The ISR acquires data from 
the hardware and enables it to issue a further interrupt. It then schedules
a callback to process the data.

Scheduled callbacks should comply with the principles of interrupt handler
design outlined below. This is to avoid problems resulting from I/O activity
and the modification of shared data which can arise in any code which 
preempts the main program loop.

Execution time needs to be considered in relation to the frequency with which
interrupts can occur. If an interrupt occurs while the previous callback
is executing, a further instance of the callback will be queued for execution;
this will run after the current instance has completed. A sustained 
high interrupt repetition rate therefore carries a risk of unconstrained 
queue growth and eventual failure with a RuntimeError.

If the callback to be passed to schedule() is a bound method, consider 
creation of Python objects above.

===  asyncio and ISR  ==================================

When an ISR runs it can preempt the asyncio scheduler. If the ISR performs 
a asyncio operation the scheduler’s operation can be disrupted. 
This applies whether the interrupt is hard or soft and also applies if the 
ISR has passed execution to another function via micropython.schedule. 
In particular creating or cancelling tasks is invalid in an ISR context.
The safe way to interact with asyncio is to implement a coroutine with 
synchronisation performed by asyncio.ThreadSafeFlag. The following fragment 
illustrates the creation of a task in response to an interrupt:

  tsf = asyncio.ThreadSafeFlag()

  def isr(_):  # Interrupt handler
    tsf.set()

  async def foo():
    while True:
        await tsf.wait()
        asyncio.create_task(bar())

In this example there will be a variable amount of latency between the 
execution of the ISR and the execution of foo(). This is inherent to 
cooperative scheduling. The maximum latency is application and platform 
dependent but may typically be measured in tens of ms.








===  PINS  ================================================

    pins = """
This is the end with the USB connector:
        ---usb---
GP0  1  |o     o| -1  VBUS
GP1  2  |o     o| -2  VSYS
GND  3  |o     o| -3  GND
GP2  4  |o     o| -4  3V3_EN
GP3  5  |o     o| -5  3V3(OUT)
GP4  6  |o     o| -6           ADC_VREF
GP5  7  |o     o| -7  GP28     ADC2
GND  8  |o     o| -8  GND      AGND
GP6  9  |o     o| -9  GP27     ADC1
GP7  10 |o     o| -10 GP26     ADC0
GP8  11 |o     o| -11 RUN
GP9  12 |o     o| -12 GP22
GND  13 |o     o| -13 GND
GP10 14 |o     o| -14 GP21
GP11 15 |o     o| -15 GP20
GP12 16 |o     o| -16 GP19
GP13 17 |o     o| -17 GP18
GND  18 |o     o| -18 GND
GP14 19 |o     o| -19 GP17
GP15 20 |o     o| -20 GP16
        ---------

"""
###
